const sf = require('../src/index')

test('capitalize', () => {
    const firstResult = sf.capitalize('hello')
    expect(firstResult).toBe('Hello')
    const secondResult = sf.capitalize('WORD')
    expect(secondResult).toBe('WORD')
    const thirdResult = sf.capitalize('')
    expect(thirdResult).toBe('')
    const fourthResult = sf.capitalize('foo bar')
    expect(fourthResult).toBe('Foo bar')
  })

test('allCaps', () => {
    const firstResult = sf.allCaps('hello')
    expect(firstResult).toBe('HELLO')
    const secondResult = sf.allCaps('WORLD')
    expect(secondResult).toBe('WORLD')
    const thirdResult = sf.allCaps('')
    expect(thirdResult).toBe('')
    const fourthResult = sf.allCaps('foo bar')
    expect(fourthResult).toBe('FOO BAR')
    const fifthResult = sf.allCaps('What!')
    expect(fifthResult).toBe('WHAT!')
  })

test('removeExtraSpaces', () => {
    const firstResult = sf.removeExtraSpaces('  Hello    world!  ')
    expect(firstResult).toBe('Hello world!')
    const secondResult = sf.removeExtraSpaces(' WORLD WORLD  ')
    expect(secondResult).toBe('WORLD WORLD')
    const thirdResult = sf.removeExtraSpaces('')
    expect(thirdResult).toBe('')
    const fourthResult = sf.removeExtraSpaces('Foo     bar')
    expect(fourthResult).toBe('Foo bar')
  }) 

test('kebobCase', () => {
    const firstResult = sf.kebobCase(' Hello world ')
    expect(firstResult).toBe('hello-world')
    const secondResult = sf.kebobCase('some /t thing')
    expect(secondResult).toBe('some-t-thing')
    const thirdResult = sf.kebobCase('')
    expect(thirdResult).toBe('')
    const fourthResult = sf.kebobCase('foo Bar /l')
    expect(fourthResult).toBe('foo-bar-l')
  }) 

test('kebobCase', () => {
    const firstResult = sf.kebobCase(' Hello world ')
    expect(firstResult).toBe('hello-world')
    const secondResult = sf.kebobCase('some /e thing')
    expect(secondResult).toBe('some-e-thing')
    const thirdResult = sf.kebobCase('')
    expect(thirdResult).toBe('')
    const fourthResult = sf.kebobCase('foo Bar \t')
    expect(fourthResult).toBe('foo-bar')
  }) 

test('snakeCase', () => {
    const firstResult = sf.snakeCase(' what the heck ')
    expect(firstResult).toBe('what_the_heck')
    const secondResult = sf.snakeCase('SOME THING')
    expect(secondResult).toBe('some_thing')
    const thirdResult = sf.snakeCase('')
    expect(thirdResult).toBe('')
    const fourthResult = sf.snakeCase('foo Bar   ')
    expect(fourthResult).toBe('foo_bar')
  }) 

test('camelCase', () => {
    const firstResult = sf.camelCase('Camel Case')
    expect(firstResult).toBe('camelCase')
    const secondResult = sf.camelCase('SOME THING')
    expect(secondResult).toBe('someTHING')
    const thirdResult = sf.camelCase('')
    expect(thirdResult).toBe('')
    const fourthResult = sf.camelCase('foo bar')
    expect(fourthResult).toBe('fooBar')
  }) 

test('shift', () => {
    const firstResult = sf.shift('Hello World', 1)
    expect(firstResult).toBe('ello WorldH')
    const secondResult = sf.shift('SOME THING', 3)
    expect(secondResult).toBe('E THINGSOM')
    const thirdResult = sf.shift('')
    expect(thirdResult).toBe('')
    const fourthResult = sf.shift('foo bar', 3)
    expect(fourthResult).toBe('barfoo')
  }) 

test('makeHashTag', () => {
    const firstResult = sf.makeHashTag('Amazing bongo drums for sale')
    expect(firstResult).toEqual(['#amazing', '#bongo', '#drums'])
    const secondResult = sf.makeHashTag('write about something that make sense')
    expect(secondResult).toEqual(["#something", "#write", "#about"])
    const thirdResult = sf.makeHashTag('')
    expect(thirdResult).toEqual(['#'])
    const fourthResult = sf.makeHashTag('Writing UNIT TESTS for Javascript')
    expect(fourthResult).toEqual(["#javascript", "#writing", "#tests"])
  }) 

test('isEmpty', () => {
    const firstResult = sf.isEmpty('Abc \r def')
    expect(firstResult).toBe(false)
    const secondResult = sf.isEmpty('   ')
    expect(secondResult).toBe(true)
    const thirdResult = sf.isEmpty('')
    expect(thirdResult).toBe(true)
    const fourthResult = sf.isEmpty(' \t \r ')
    expect(fourthResult).toBe(true)
  }) 